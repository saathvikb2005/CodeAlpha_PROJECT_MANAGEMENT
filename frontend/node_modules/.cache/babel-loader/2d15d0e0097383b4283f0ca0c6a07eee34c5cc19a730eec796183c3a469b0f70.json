{"ast":null,"code":"var _jsxFileName = \"D:\\\\INTERNSHIPS\\\\CODEALPHA\\\\PROJECT_MANAGEMENT\\\\frontend\\\\src\\\\pages\\\\ProjectBoard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport API from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProjectBoard() {\n  _s();\n  const {\n    id\n  } = useParams(); // project id from URL\n  const [project, setProject] = useState(null);\n  const [tasks, setTasks] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchProject = async () => {\n      try {\n        const res = await API.get(`/projects/${id}/`);\n        setProject(res.data);\n        setTasks(res.data.tasks || []);\n      } catch (err) {\n        alert(\"Error loading project\");\n        navigate(\"/\");\n      }\n    };\n    fetchProject();\n  }, [id, navigate]);\n  const getTasksByStatus = status => tasks.filter(task => task.status === status);\n  const handleTaskClick = taskId => {\n    navigate(`/task/${taskId}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: project === null || project === void 0 ? void 0 : project.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: project === null || project === void 0 ? void 0 : project.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        gap: \"20px\"\n      },\n      children: [\"To-Do\", \"In-Progress\", \"Done\"].map(status => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: status\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), getTasksByStatus(status).map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: () => handleTaskClick(task.id),\n          style: {\n            border: \"1px solid #ccc\",\n            marginBottom: \"10px\",\n            padding: \"10px\",\n            cursor: \"pointer\"\n          },\n          children: task.title\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this))]\n      }, status, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(ProjectBoard, \"Xf9iy2a8aInk8rktX2GMpXLD9KU=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = ProjectBoard;\nexport default ProjectBoard;\nvar _c;\n$RefreshReg$(_c, \"ProjectBoard\");","map":{"version":3,"names":["React","useEffect","useState","useParams","useNavigate","API","jsxDEV","_jsxDEV","ProjectBoard","_s","id","project","setProject","tasks","setTasks","navigate","fetchProject","res","get","data","err","alert","getTasksByStatus","status","filter","task","handleTaskClick","taskId","className","children","name","fileName","_jsxFileName","lineNumber","columnNumber","description","style","display","gap","map","flex","onClick","border","marginBottom","padding","cursor","title","_c","$RefreshReg$"],"sources":["D:/INTERNSHIPS/CODEALPHA/PROJECT_MANAGEMENT/frontend/src/pages/ProjectBoard.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport API from \"../utils/api\";\r\n\r\nfunction ProjectBoard() {\r\n  const { id } = useParams(); // project id from URL\r\n  const [project, setProject] = useState(null);\r\n  const [tasks, setTasks] = useState([]);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchProject = async () => {\r\n      try {\r\n        const res = await API.get(`/projects/${id}/`);\r\n        setProject(res.data);\r\n        setTasks(res.data.tasks || []);\r\n      } catch (err) {\r\n        alert(\"Error loading project\");\r\n        navigate(\"/\");\r\n      }\r\n    };\r\n    fetchProject();\r\n  }, [id, navigate]);\r\n\r\n  const getTasksByStatus = (status) => tasks.filter(task => task.status === status);\r\n\r\n  const handleTaskClick = (taskId) => {\r\n    navigate(`/task/${taskId}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>{project?.name}</h2>\r\n      <p>{project?.description}</p>\r\n\r\n      <div style={{ display: \"flex\", gap: \"20px\" }}>\r\n        {[\"To-Do\", \"In-Progress\", \"Done\"].map((status) => (\r\n          <div key={status} style={{ flex: 1 }}>\r\n            <h3>{status}</h3>\r\n            {getTasksByStatus(status).map((task) => (\r\n              <div\r\n                key={task.id}\r\n                onClick={() => handleTaskClick(task.id)}\r\n                style={{\r\n                  border: \"1px solid #ccc\",\r\n                  marginBottom: \"10px\",\r\n                  padding: \"10px\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                {task.title}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProjectBoard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}